" Phillip Vo

" PLUGINS {{{
call plug#begin('~/.vim/plugged')
" Git
Plug 'tpope/vim-fugitive'
" Text Editing
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'jiangmiao/auto-pairs'
Plug 'SirVer/ultisnips'
" Notes
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'vim-pandoc/vim-pandoc-after'
Plug 'dhruvasagar/vim-table-mode'
Plug 'junegunn/goyo.vim'
Plug 'dkarter/bullets.vim'
" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': '.install --all' }
Plug 'junegunn/fzf.vim'
" Miscellaneous
Plug 'w0rp/ale'
Plug 'christoomey/vim-tmux-navigator'
Plug 'scrooloose/nerdtree'
call plug#end()
" }}}
" LEADER {{{1
let mapleader="," " leader is comma

" Markdown Headings {{{2
nnoremap <leader>1 m`yypVr=``
nnoremap <leader>2 m`yypVr-``
nnoremap <leader>3 ^i### <esc>
nnoremap <leader>4 ^i#### <esc>
nnoremap <leader>5 ^i##### <esc>
" }}}
" Notes {{{2
nnoremap <leader>pp :!pandoc --pdf-engine=lualatex --filter pandoc-citeproc --bibliography=%:r.bib -H ~/resources/notes.tex -o %:r.pdf %<CR>
nnoremap <leader>o :!open %:r.pdf 2>&1 > /dev/null &<CR><CR>
" }}}
" Quickediting {{{2
nnoremap <leader>ev <C-w>s<C-w>j<C-w>L:e $MYVIMRC<CR>
nnoremap <leader>es <C-w>s<C-w>j<C-w>L:e ~/.vim/UltiSnips/<CR>
nnoremap <leader>ed <C-w>s<C-w>j<C-w>L:e ~/Dropbox/<CR>
nnoremap <leader>ew <C-w>s<C-w>j<C-w>L:e ~/Dropbox/3B/<CR>
nnoremap <leader>en <C-w>s<C-w>j<C-w>L:e ~/Dropbox/Notes<CR>
" }}}
" Misc {{{2
nnoremap <leader><space> :nohlsearch<CR>
nnoremap <leader>s :set spell!<cr>
nnoremap <leader>w :w<cr>
nnoremap <leader>q :q<cr>
nnoremap <leader>Q :q!<cr>
nnoremap <leader>Z :wq<cr>
" }}}
" }}}
" FILETYPES {{{
filetype plugin on

augroup filetypes
    au!

    au BufNewFile,BufRead *.md setlocal ft=markdown.tex spell ts=2 sts=2 sw=2 et ai si

    au Filetype gitcommit setlocal spell

    au FileType html,xhtml,xml,css setlocal ts=2 sts=2 sw=2 et ai
    au FileType javascript setlocal ts=2 sts=2 sw=2 et ai si noci 
    au FileType python setlocal ts=4 sts=4 sw=4 et ai si cinwords=if,elif,else,for,while,try,except,finally,def,class

    au FileType pandoc setlocal syn=off

    au FileType python setlocal foldmethod=indent foldlevel=99

    au BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

    au FileType sh setlocal ts=2 sts=2 sw=2 et ai
augroup END
" }}}
" THEME & LAYOUT {{{
colorscheme badwolf
set number relativenumber  " show hybrid line numbers
set showcmd " show last command in bottom bar
set cursorline " highlight current line
syntax enable " enable syntax processing
" }}}
" MISC {{{
set nocompatible

set wildmenu " visual autocomplete for command menu
set lazyredraw " redraw only when we need to
set showmatch " highlight matching [{()}]
set cursorline

set modeline
set modelines=1

set backspace=2 " backspace over everything
set scrolloff=5

set noswapfile

" jk is escape (only for insert mode)
inoremap jk <esc>
inoremap JK <esc>

" Spellcheck
set spelllang=en
" }}}
" SEARCHING {{{
set incsearch
set hlsearch
" }}}
" TEXT FORMATTING {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent

set list
set listchars=tab:▸\ ,eol:¬

set showbreak=↪
" }}}
" NAVIGATING {{{
" move vertically by visual line (only in normal mode)
nnoremap j gj
nnoremap k gk

" disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" map H/L to move to first/last non-space character of the line
nnoremap H ^
nnoremap L g_

" Open new line above/below current line
"nnoremap o o<esc>
"nnoremap O O<esc>
" }}}
" FOLDING {{{
set foldenable
set foldmethod=indent
set foldlevelstart=10
set foldnestmax=10

" space open/closes folds
nnoremap <space> za
nnoremap <leader>z zMzvzz
" }}}
" EXTENDED TEXT OBJECTS {{{
let s:items = [ "*", "_", "$" ]
for item in s:items
    exe "nnoremap yi".item." T".item."yt".item
    exe "nnoremap ya".item." F".item."yf".item
    exe "nnoremap ci".item." T".item."ct".item
    exe "nnoremap ca".item." F".item."cf".item
    exe "nnoremap di".item." T".item."dt".item
    exe "nnoremap da".item." F".item."df".item
    exe "nnoremap vi".item." T".item."vt".item
    exe "nnoremap va".item." F".item."vf".item
endfor
" FUNCTIONS {{{1
" Fix Spelling Error {{{2
function! FixLastSpellCheckError()
    normal! mm[s1z=`m
endfunction

nnoremap <leader>sp :call FixLastSpellCheckError()<CR>
"}}}
" Toggle Pandoc Auto-compile {{{2
function! ToggleAutoCompile()
    if g:pandoc#command#autoexec_on_writes
        let g:pandoc#command#autoexec_on_writes = 0
        echo "pandoc auto-compiling off."
    else
        let g:pandoc#command#autoexec_on_writes = 1
        echo "pandoc auto-compiling on."
    endif
endfunction

nnoremap <silent> <leader>ac :call ToggleAutoCompile()<CR>
" }}}
" }}}
" TMUX {{{
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif
" }}}
" PLUGINS {{{1
" auto-pairs {{{2
let g:AutoPairsShortcutToggle = '<leader>ap'
" }}}
" UltiSnips {{{2
nnoremap <leader>ue :UltiSnipsEdit<cr>
nnoremap <leader>ur :call UltiSnips#RefreshSnippets()<cr>

let g:UltiSnipsSnippetDir="~/dotfiles/vim/UltiSnips"
let g:UltiSnipsEditSplit="vertical"
" }}}
" vim-pandoc {{{2
let g:pandoc#filetypes#handled = ["pandoc", "markdown"]
let g:pandoc#command#autoexec_on_writes = 0
let g:pandoc#command#autoexec_command = "Pandoc pdf --pdf-engine=lualatex -H ~/resources/notes.tex"
let g:pandoc#after#modules#enabled = ["ultisnips", "tablemode"]

nnoremap <leader>pd :pandoc 
" }}}
" fzf {{{2
map <leader>f :FZF<CR>
" }}}
" Goyo {{{2
nnoremap <leader>G :Goyo<CR>
" }}}
" NERDTree {{{2
map <C-n> :NERDTreeToggle<CR>
" }}}
" ALE {{{2
let g:ale_sign_column_always = 1
map <leader>at :ALEToggle<cr>
" }}}
" Bullets {{{
let g:bullets_enabled_file_types = [
    \ 'markdown',
    \ 'text',
    \ 'gitcommit',
    \]
" }}}
" }}}

" vim:foldmethod=marker:foldlevel=0
