" Phillip Vo

" PLUGINS {{{
call plug#begin('~/.vim/plugged')
" Git
Plug 'tpope/vim-fugitive'
" Text Editing
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'ervandew/supertab'
" Notes
Plug 'vimwiki/vimwiki'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'suan/vim-instant-markdown'
Plug 'christoomey/vim-tmux-navigator'
" FZF
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': '.install --all' }
Plug 'junegunn/fzf.vim'
" Miscellaneous
Plug 'w0rp/ale'
call plug#end()
" }}}
" LEADER {{{
let mapleader="," " leader is comma
" }}}
" FILETYPES {{{
filetype plugin on

augroup filetypes
    au!

    au BufNewFile,BufRead *.md setlocal ft=markdown spell

    au Filetype gitcommit setlocal spell

    au FileType html,xhtml,xml,css setlocal ts=2 sts=2 sw=2 et ai
    au FileType javascript setlocal ts=2 sts=2 sw=2 et ai si noci 
    au FileType python setlocal ts=4 sts=4 sw=4 et ai si cinwords=if,elif,else,for,while,try,except,finally,def,class

    au FileType markdown setlocal syn=off
    au FileType python setlocal foldmethod=indent foldlevel=99
augroup END
" }}}
" THEME & LAYOUT {{{
colorscheme badwolf
set number relativenumber  " show hybrid line numbers
set showcmd " show last command in bottom bar
set cursorline " highlight current line
syntax enable " enable syntax processing
" }}}
" MISC {{{
set nocompatible

set wildmenu " visual autocomplete for command menu
set lazyredraw " redraw only when we need to
set showmatch " highlight matching [{()}]
set cursorline

set modeline
set modelines=1

" jk is escape (only for insert mode)
inoremap jk <esc>
inoremap JK <esc>

" Spellcheck
set spelllang=en
nnoremap<leader>s :set spell!<cr>
" }}}
" SEARCHING {{{
set incsearch
set hlsearch
nnoremap <leader><space> :nohlsearch<CR>
" }}}
" TEXT FORMATTING {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent

set list
set listchars=tab:▸\ ,eol:¬
" }}}
" NAVIGATING {{{
" move vertically by visual line (only in normal mode)
nnoremap j gj
nnoremap k gk

" disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" map H/L to move to first/last non-space character of the line
" nnoremap H ^
" nnoremap L g_

" Quickfix
nnoremap ]q :cnext<cr>zz
nnoremap [q :cprev<cr>zz
" }}}
" FOLDING {{{
set foldenable
set foldmethod=indent
set foldlevelstart=10
set foldnestmax=10

" space open/closes folds
nnoremap <space> za
" }}}
" FUNCTIONS {{{1
" Markdown Underlining {{{2
function! UnderlineHeading(level)
    if a:level == 1
        normal! yypVr=
    elseif a:level == 2
        normal! yypVr-
    else
        normal! I### 
    endif
endfunction

nnoremap <leader>u1 :call UnderlineHeading(1)<CR>
nnoremap <leader>u2 :call UnderlineHeading(2)<CR>
nnoremap <leader>u3 :call UnderlineHeading(3)<CR>
" }}}
" Fix Spelling Error {{{2
function! FixLastSpellCheckError()
    normal! mm[s1z=`m
endfunction

nnoremap <leader>sp :call FixLastSpellCheckError()<CR>
"}}}
" }}}
" TMUX {{{
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif
" }}}
" FZF {{{
map <leader>f :FZF<CR>
" }}}
" ALE {{{
let g:ale_sign_column_always = 1

map <leader>at :ALEToggle<cr>
" }}}
" NOTES {{{1
" Vimwiki {{{2
let g:vimwiki_ext2syntax = {'.md': 'markdown', '.markdown': 'markdown', '.mdown': 'markdown'}
" }}}
" Vim-Instant-Markdown {{{2
let g:instant_markdown_autostart = 0
map <leader>md :InstantMarkdownPreview<CR>
" }}}
" }}}
" MATH {{{1
" Greek {{{2
map! <C-v>GA Γ
map! <C-v>DE Δ
map! <C-v>TH Θ
map! <C-v>LA Λ
map! <C-v>XI Ξ
map! <C-v>PI Π
map! <C-v>SI Σ
map! <C-v>PH Φ
map! <C-v>PS Ψ
map! <C-v>OM Ω
map! <C-v>al α
map! <C-v>be β
map! <C-v>ga γ
map! <C-v>de δ
map! <C-v>ep ε
map! <C-v>ze ζ
map! <C-v>et η
map! <C-v>th θ
map! <C-v>io ι
map! <C-v>ka κ
map! <C-v>la λ
map! <C-v>mu μ
map! <C-v>xi ξ
map! <C-v>pi π
map! <C-v>rh ρ
map! <C-v>si σ
map! <C-v>ta τ
map! <C-v>ps ψ
map! <C-v>om ω
map! <leader>ph ϕ"
" }}}
" Math {{{2
map! <C-v>ll →
map! <C-v>hh ←
map! <C-v>kk ↑
map! <C-v>jj ↓
map! <C-v>hl ↔
map! <C-v>= ∝
map! <C-v>~ ≈
map! <C-v>~= ≅
map! <C-v>!= ≠
map! <C-v>!> ⇸
map! <C-v>~> ↝
map! <C-v>>= ≥
map! <C-v><= ≤
map! <C-v>0  °
map! <C-v>*  •
map! <C-v>+  ⊕
map! <C-v>inf ∞
" }}}
" }}}

" vim:foldmethod=marker:foldlevel=0
