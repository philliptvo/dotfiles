" Phillip Vo

" LOADING {{{

" Plugins
call plug#begin('~/.vim/plugged')

Plug 'w0rp/ale'
Plug 'ervandew/supertab'
Plug 'bronson/vim-trailing-whitespace'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'vim-pandoc/vim-pandoc'
Plug 'vim-pandoc/vim-pandoc-syntax'
Plug 'christoomey/vim-tmux-navigator'

Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': '.install --all' }

call plug#end()
" }}}
" LEADER {{{
let mapleader="," " leader is comma
" }}}
" FILETYPE PLUGINS {{{
filetype plugin on
" }}}
" THEME & LAYOUT {{{
colorscheme badwolf
set number relativenumber  " show hybrid line numbers
set showcmd " show last command in bottom bar
set cursorline " highlight current line
syntax enable " enable syntax processing
" }}}
" MISC {{{
set wildmenu " visual autocomplete for command menu
set lazyredraw " redraw only when we need to
set showmatch " highlight matching [{()}]

set modeline
set modelines=1

" jk is escape (only for insert mode)
inoremap jk <esc>
inoremap JK <esc>
" }}}
" SEARCHING {{{
set incsearch
set hlsearch
nnoremap <leader><space> :nohlsearch<CR>
" }}}
" TEXT FORMATTING {{{
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
" }}}
" NAVIGATING {{{
" move vertically by visual line (only in normal mode)
nnoremap j gj
nnoremap k gk

" disable arrow keys
noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" set $/^ to no do anything (only in normal mode)
" nnoremap $ <nop>
" nnoremap ^ <nop>

" Quickfix
nnoremap ]q :cnext<cr>zz
nnoremap [q :cprev<cr>zz

" Buffers
nnoremap ]b :bnext<cr>
nnoremap [b :bprev<cr>

" Tabs
nnoremap ]t :tabn<cr>
nnoremap [t :tabp<cr>

" <tab> / <s-tab> | Circular windows navigation
nnoremap <tab>   <c-w>w
nnoremap <S-tab> <c-w>W
" }}}
" FOLDING {{{
set foldenable
set foldmethod=indent
set foldlevelstart=10
set foldnestmax=10

" space open/closes folds
nnoremap <space> za
" }}}
" FILETYPES {{{
augroup filetypes
    au!

    au BufNewFile,BufRead *.md setlocal ft=markdown

    au FileType html,xhtml,xml,css setlocal ts=2 sts=2 sw=2 et ai
    au FileType javascript setlocal ts=2 sts=2 sw=2 et ai si noci 
    au FileType python setlocal ts=4 sts=4 sw=4 et ai si cinwords=if,elif,else,for,while,try,except,finally,def,class

    au FileType markdown setlocal syn=off
    au FileType python setlocal foldmethod=indent foldlevel=99
augroup END
" }}}
" FUNCTIONS {{{
function! UnderlineHeading(level)
    if a:level == 1
        normal! yypVr=
    elseif a:level == 2
        normal! yypVr-
    else
        normal! I### 
    endif
endfunction

nnoremap <leader>u1 :call UnderlineHeading(1)<CR>
nnoremap <leader>u2 :call UnderlineHeading(2)<CR>
nnoremap <leader>u3 :call UnderlineHeading(3)<CR>

" }}}
" TMUX {{{
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    silent! execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
      call system("tmux select-pane -" . a:tmuxdir)
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif
" }}}
" FZF {{{
map ; :FZF<CR>
" }}}
" GITGUTTER {{{
set updatetime=100
nnoremap <leader>g :GitGutterToggle<cr>
" }}}
" ALE {{{
let g:ale_sign_column_always = 1

map <leader>at :ALEToggle<cr>
" }}}
" VIMRC {{{
nnoremap <leader>s :source ~/.vimrc<CR>
" }}}

" vim:foldmethod=marker:foldlevel=0
